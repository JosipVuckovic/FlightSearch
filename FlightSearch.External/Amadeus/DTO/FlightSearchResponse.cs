//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace FlightSearch.External.Amadeus.DTO
{
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Issue
    {
        /// <summary>
        /// the HTTP status code applicable to this error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        /// <summary>
        /// an application-specific error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public long? Code { get; set; }

        /// <summary>
        /// a short summary of the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// explanation of the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// an object containing references to the source of the error
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public Source Source { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Collection_Meta
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oneWayCombinations")]
        public System.Collections.Generic.ICollection<OneWayCombinations> OneWayCombinations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Collection_Meta_Link
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public Links Links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class LocationEntry
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class AircraftEntry
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class CurrencyEntry
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class CarrierEntry
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// defining a flight segment; including both operating and marketing details when applicable
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightSegment
    {

        [System.Text.Json.Serialization.JsonPropertyName("departure")]
        public FlightEndPoint Departure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("arrival")]
        public FlightEndPoint Arrival { get; set; }

        /// <summary>
        /// providing the airline / carrier code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }

        /// <summary>
        /// the flight number as assigned by the carrier
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aircraft")]
        public AircraftEquipment Aircraft { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operating")]
        public OperatingFlight Operating { get; set; }

        /// <summary>
        /// stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public string Duration { get; set; }

        /// <summary>
        /// information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stops")]
        public System.Collections.Generic.ICollection<FlightStop> Stops { get; set; }

    }

    /// <summary>
    /// departure or arrival information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OriginalFlightEndPoint
    {
        /// <summary>
        /// [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        /// <summary>
        /// terminal name / number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("terminal")]
        public string Terminal { get; set; }

    }

    /// <summary>
    /// departure or arrival information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightEndPoint : OriginalFlightEndPoint
    {
        /// <summary>
        /// local date and time in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("at")]
        public System.DateTimeOffset? At { get; set; }

    }

    /// <summary>
    /// details of stops for direct or change of gauge flights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OriginalFlightStop
    {
        /// <summary>
        /// [IATA airline codes](http://www.iata.org/publications/Pages/code-search.aspx)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iataCode")]
        public string IataCode { get; set; }

        /// <summary>
        /// stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public string Duration { get; set; }

    }

    /// <summary>
    /// details of stops for direct or change of gauge flights
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightStop : OriginalFlightStop
    {
        /// <summary>
        /// arrival at the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("arrivalAt")]
        public System.DateTimeOffset? ArrivalAt { get; set; }

        /// <summary>
        /// departure from the stop in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("departureAt")]
        public System.DateTimeOffset? DepartureAt { get; set; }

    }

    /// <summary>
    /// information related to the aircraft
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class AircraftEquipment
    {
        /// <summary>
        /// IATA aircraft code (http://www.flugzeuginfo.net/table_accodes_iata_en.php)
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z0-9]{3}")]
        public string Code { get; set; }

    }

    /// <summary>
    /// information about the operating flight
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OperatingFlight
    {
        /// <summary>
        /// providing the airline / carrier code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string CarrierCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Price
    {

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Total amount paid by the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public string Total { get; set; }

        /// <summary>
        /// Amount without taxes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        /// <summary>
        /// List of applicable fees
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fees")]
        public System.Collections.Generic.ICollection<Fee> Fees { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("taxes")]
        public System.Collections.Generic.ICollection<Tax> Taxes { get; set; }

        /// <summary>
        /// The amount of taxes which are refundable
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundableTaxes")]
        public string RefundableTaxes { get; set; }

    }

    /// <summary>
    /// price information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Extended_Price : Price
    {
        /// <summary>
        /// BOOK step ONLY - The price margin percentage (plus or minus) that the booking can tolerate. When set to 0, then no price magin is tolerated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("margin")]
        public string Margin { get; set; }

        /// <summary>
        /// Total amount paid by the user (including fees and selected additional services).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grandTotal")]
        public string GrandTotal { get; set; }

        /// <summary>
        /// Currency of the payment. It may be different than the requested currency
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("billingCurrency")]
        public string BillingCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalServices")]
        public System.Collections.Generic.ICollection<AdditionalServices> AdditionalServices { get; set; }

    }

    /// <summary>
    /// a fee
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Fee
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FeeType? Type { get; set; }

    }

    /// <summary>
    /// type of fee
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TICKETING")]
        TICKETING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FORM_OF_PAYMENT")]
        FORM_OF_PAYMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPLIER")]
        SUPPLIER = 2,

    }

    /// <summary>
    /// a tax
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Tax
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Co2Emission
    {
        /// <summary>
        /// Weight of Co2 emitted for the concerned segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Code to qualify unit as pounds or kilos
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weightUnit")]
        public string WeightUnit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cabin")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelClass? Cabin { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OriginDestination : OriginDestinationLight
    {
        /// <summary>
        /// Include other possible locations around the point, located less than this distance in kilometers away. Max:300
        /// <br/>
        /// <br/>Can not be combined with "dateWindow" or "timeWindow".
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originRadius")]
        public double? OriginRadius { get; set; }

        /// <summary>
        /// Set of alternative origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("alternativeOriginsCodes")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<string> AlternativeOriginsCodes { get; set; }

        /// <summary>
        /// Include other possible locations around the point, located less than this distance in kilometers away. Max:300
        /// <br/>
        /// <br/>Can not be combined with "dateWindow" or "timeWindow".
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("destinationRadius")]
        public double? DestinationRadius { get; set; }

        /// <summary>
        /// Set of alternative destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("alternativeDestinationsCodes")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<string> AlternativeDestinationsCodes { get; set; }

        /// <summary>
        /// Approximate date and time of departure, specified as a local date and time range.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("departureDateTimeRange")]
        public DateTimeRange DepartureDateTimeRange { get; set; }

        /// <summary>
        /// Approximate date and time of arrival, specified as a local date and time range.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("arrivalDateTimeRange")]
        public DateTimeRange ArrivalDateTimeRange { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OriginDestinationLight
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Origin location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originLocationCode")]
        public string OriginLocationCode { get; set; }

        /// <summary>
        /// Destination location, such as a city or an airport. Currently, only the locations defined in [IATA](http://www.iata.org/publications/Pages/code-search.aspx) are supported.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("destinationLocationCode")]
        public string DestinationLocationCode { get; set; }

        /// <summary>
        /// List of included connections points. When an includedViaPoints option is specified, all FlightOffer returned must at least go via this Connecting Point. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedConnectionPoints")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<string> IncludedConnectionPoints { get; set; }

        /// <summary>
        /// List of excluded connections points. Any FlightOffer with these connections points will be present in response. Currently, only the locations defined in IATA are supported. Used only by the AMADEUS provider
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("excludedConnectionPoints")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<string> ExcludedConnectionPoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class DateTimeRange : DateTimeType
    {
        /// <summary>
        /// Either 1, 2 or 3 extra days around the local date (IxD for +/- x days - Ex: I3D), Either 1 to 3 days after the local date (PxD for +x days - Ex: P3D), or 1 to 3 days before the local date (MxD for -x days - Ex: M3D)
        /// <br/>
        /// <br/>Can not be combined with "originRadius" or "destinationRadius".
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateWindow")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[MPI][1-3]D")]
        public string DateWindow { get; set; }

        /// <summary>
        /// 1 to 12 hours around (both +and -) the local time. Possibly limited by the number of extra days when specified, i.e.  in some situations, it may not be used to exceed the maximum date range. [1-12]H format, e.g. 6H
        /// <br/>
        /// <br/>Can not be combined with "originRadius" or "destinationRadius".
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timeWindow")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^([1-9]|10|11|12)H")]
        public string TimeWindow { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class DateTimeType
    {
        /// <summary>
        /// Dates are specified in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) YYYY-MM-DD format, e.g. 2018-12-25
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Local time. hh:mm:ss format, e.g 10:30:00
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public string Time { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Extended_TravelerInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("travelerType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelerType TravelerType { get; set; }

        /// <summary>
        /// if type="HELD_INFANT", corresponds to the adult travelers's id who will share the seat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("associatedAdultId")]
        public string AssociatedAdultId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class SearchCriteria
    {
        /// <summary>
        /// This option allows to exclude the isAllotment flag associated to a booking class in the search response when it exist.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("excludeAllotments")]
        public bool? ExcludeAllotments { get; set; }

        /// <summary>
        /// This option allows activate the one-way combinable feature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addOneWayOffers")]
        public bool? AddOneWayOffers { get; set; }

        /// <summary>
        /// Maximum number of flight offers returned (Max 250)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxFlightOffers")]
        public double? MaxFlightOffers { get; set; }

        /// <summary>
        /// maximum price per traveler. By default, no limit is applied. If specified, the value should be a positive number with no decimals
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxPrice")]
        public int? MaxPrice { get; set; }

        /// <summary>
        /// This option allows to default to a standard fareOption if no offers are found for the selected fareOption.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allowAlternativeFareOptions")]
        public bool? AllowAlternativeFareOptions { get; set; }

        /// <summary>
        /// Requests the system to find at least one flight-offer per day, if possible, when a range of dates is specified. Default is false.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("oneFlightOfferPerDay")]
        public bool? OneFlightOfferPerDay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalInformation")]
        public AdditionalInformation AdditionalInformation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricingOptions")]
        public Extended_PricingOptions PricingOptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flightFilters")]
        public FlightFilters FlightFilters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class CabinRestriction
    {

        [System.Text.Json.Serialization.JsonPropertyName("cabin")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelClass? Cabin { get; set; }

        /// <summary>
        /// The list of originDestination identifiers for which the cabinRestriction applies
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originDestinationIds")]
        public System.Collections.Generic.ICollection<string> OriginDestinationIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Extended_CabinRestriction : CabinRestriction
    {

        [System.Text.Json.Serialization.JsonPropertyName("coverage")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Coverage? Coverage { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightFilters
    {
        /// <summary>
        /// Allows to search a location outside the borders when a radius around a location is specified. Default is false.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("crossBorderAllowed")]
        public bool? CrossBorderAllowed { get; set; }

        /// <summary>
        /// This flag enables/disables the possibility to have more overnight flights in Low Fare Search
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("moreOvernightsAllowed")]
        public bool? MoreOvernightsAllowed { get; set; }

        /// <summary>
        /// This option force to retrieve flight-offer with a departure and a return in the same airport
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("returnToDepartureAirport")]
        public bool? ReturnToDepartureAirport { get; set; }

        /// <summary>
        /// This flag enable/disable filtering of rail segment (TGV AIR, RAIL ...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("railSegmentAllowed")]
        public bool? RailSegmentAllowed { get; set; }

        /// <summary>
        /// This flag enable/disable filtering of bus segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("busSegmentAllowed")]
        public bool? BusSegmentAllowed { get; set; }

        /// <summary>
        /// Maximum flight time as a percentage relative to the shortest flight time available for the itinerary
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxFlightTime")]
        public double? MaxFlightTime { get; set; }

        /// <summary>
        /// Restriction towards carriers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("carrierRestrictions")]
        public CarrierRestrictions CarrierRestrictions { get; set; }

        /// <summary>
        /// Restriction towards cabins.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cabinRestrictions")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<Extended_CabinRestriction> CabinRestrictions { get; set; }

        /// <summary>
        /// Restriction towards number of connections.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connectionRestriction")]
        public ConnectionRestriction ConnectionRestriction { get; set; }

    }

    /// <summary>
    /// Restriction towards carriers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class CarrierRestrictions
    {
        /// <summary>
        /// This flag enable/disable filtering of blacklisted airline by EU. The list of the banned airlines is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blacklistedInEUAllowed")]
        public bool? BlacklistedInEUAllowed { get; set; }

        /// <summary>
        /// This option ensures that the system will only consider these airlines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("excludedCarrierCodes")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<string> ExcludedCarrierCodes { get; set; }

        /// <summary>
        /// This option ensures that the system will only consider these airlines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedCarrierCodes")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<string> IncludedCarrierCodes { get; set; }

    }

    /// <summary>
    /// Restriction towards number of connections.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class ConnectionRestriction
    {
        /// <summary>
        /// The maximal number of connections for each itinerary. Value can be 0, 1 or 2.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxNumberOfConnections")]
        public double? MaxNumberOfConnections { get; set; }

        /// <summary>
        /// When this option is requested, recommendations made of Non-Stop flights only are favoured by the search, on the whole itinerary, with a weight of 75%. It is possible to override this default 75% weight of Non-Stop recommendations by providing the requested weight in the attribute nonStopPreferredWeight
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nonStopPreferred")]
        public bool? NonStopPreferred { get; set; }

        /// <summary>
        /// This weight is the percentage of total number of recommendations that could be returned for Non-Stop flight recommendations. It is only relevant when combined with nonSTopPreferred set to true. If not specified, the default weight of 75% is applied
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nonStopPreferredWeight")]
        public double? NonStopPreferredWeight { get; set; }

        /// <summary>
        /// Allow to change airport during connection
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("airportChangeAllowed")]
        public bool? AirportChangeAllowed { get; set; }

        /// <summary>
        /// This option allows the single segment to have one or more intermediate stops (technical stops).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("technicalStopsAllowed")]
        public bool? TechnicalStopsAllowed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightOffer
    {
        /// <summary>
        /// the resource name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Id of the flight offer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FlightOfferSource? Source { get; set; }

        /// <summary>
        /// If true, inform that a ticketing will be required at booking step.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instantTicketingRequired")]
        public bool? InstantTicketingRequired { get; set; }

        /// <summary>
        /// BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("disablePricing")]
        public bool? DisablePricing { get; set; }

        /// <summary>
        /// If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nonHomogeneous")]
        public bool? NonHomogeneous { get; set; }

        /// <summary>
        /// If true, the flight offer can be combined with other oneWays flight-offers to complete the whole journey (one-Way combinable feature).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("oneWay")]
        public bool? OneWay { get; set; }

        /// <summary>
        /// If true, a payment card is mandatory to book this flight offer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentCardRequired")]
        public bool? PaymentCardRequired { get; set; }

        /// <summary>
        /// If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastTicketingDate")]
        public string LastTicketingDate { get; set; }

        /// <summary>
        /// If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date/time (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). Information only this attribute is not used in input of pricing request. Local date and time in YYYY-MM-ddThh:mm:ss format, e.g. 2017-02-10T20:40:00
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastTicketingDateTime")]
        public System.DateTimeOffset? LastTicketingDateTime { get; set; }

        /// <summary>
        /// Number of seats bookable in a single request. Can not be higher than 9.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfBookableSeats")]
        [System.ComponentModel.DataAnnotations.Range(1D, 9D)]
        public double? NumberOfBookableSeats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("itineraries")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(250)]
        public System.Collections.Generic.ICollection<Itineraries> Itineraries { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public Extended_Price Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pricingOptions")]
        public PricingOptions PricingOptions { get; set; }

        /// <summary>
        /// This option ensures that the system will only consider offers with these airlines as validating carrier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validatingAirlineCodes")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<string> ValidatingAirlineCodes { get; set; }

        /// <summary>
        /// Fare information for each traveler/segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("travelerPricings")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<TravelerPricings> TravelerPricings { get; set; }

    }

    /// <summary>
    /// fare filter options
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Extended_PricingOptions
    {
        /// <summary>
        /// If true, returns the flight-offers with included checked bags only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedCheckedBagsOnly")]
        public bool? IncludedCheckedBagsOnly { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with refundable fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundableFare")]
        public bool? RefundableFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no restriction fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noRestrictionFare")]
        public bool? NoRestrictionFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no penalty fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noPenaltyFare")]
        public bool? NoPenaltyFare { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Segment : FlightSegment
    {
        /// <summary>
        /// Id of the segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Number of stops planned on the segment for technical or operation purpose i.e. refueling
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfStops")]
        public int? NumberOfStops { get; set; }

        /// <summary>
        /// When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission. 
        /// <br/>
        /// <br/>To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
        /// <br/>The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline   
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blacklistedInEU")]
        public bool? BlacklistedInEU { get; set; }

        /// <summary>
        /// Co2 informations
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("co2Emissions")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Co2Emission> Co2Emissions { get; set; }

    }

    /// <summary>
    /// traveler type
    /// <br/>age restrictions : CHILD &lt; 12y, HELD_INFANT &lt; 2y, SEATED_INFANT &lt; 2y, SENIOR &gt;=60y
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TravelerType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SENIOR")]
        SENIOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"YOUNG")]
        YOUNG = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HELD_INFANT")]
        HELD_INFANT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SEATED_INFANT")]
        SEATED_INFANT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT")]
        STUDENT = 6,

    }

    /// <summary>
    /// fare filter options
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class ExtendedPricingOptions
    {
        /// <summary>
        /// If true, returns the flight-offers with included checked bags only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedCheckedBagsOnly")]
        public bool? IncludedCheckedBagsOnly { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with refundable fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundableFare")]
        public bool? RefundableFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no restriction fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noRestrictionFare")]
        public bool? NoRestrictionFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no penalty fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noPenaltyFare")]
        public bool? NoPenaltyFare { get; set; }

    }

    /// <summary>
    /// part of the trip covered by the travel class restriction (ALL_SEGMENTS if ommited)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Coverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MOST_SEGMENTS")]
        MOST_SEGMENTS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AT_LEAST_ONE_SEGMENT")]
        AT_LEAST_ONE_SEGMENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL_SEGMENTS")]
        ALL_SEGMENTS = 2,

    }

    /// <summary>
    /// additional service type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalServiceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHECKED_BAGS")]
        CHECKED_BAGS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MEALS")]
        MEALS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SEATS")]
        SEATS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_SERVICES")]
        OTHER_SERVICES = 3,

    }

    /// <summary>
    /// source of the flight offer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FlightOfferSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,

    }

    /// <summary>
    /// option specifying a group of fares, which may be valid under certain conditons
    /// <br/>Can be used to specify special fare discount for a passenger
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TravelerPricingFareOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INCLUSIVE_TOUR")]
        INCLUSIVE_TOUR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_MELILLA_RESIDENT")]
        SPANISH_MELILLA_RESIDENT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CEUTA_RESIDENT")]
        SPANISH_CEUTA_RESIDENT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_CANARY_RESIDENT")]
        SPANISH_CANARY_RESIDENT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SPANISH_BALEARIC_RESIDENT")]
        SPANISH_BALEARIC_RESIDENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS")]
        AIR_FRANCE_METROPOLITAN_DISCOUNT_PASS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_DOM_DISCOUNT_PASS")]
        AIR_FRANCE_DOM_DISCOUNT_PASS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_COMBINED_DISCOUNT_PASS")]
        AIR_FRANCE_COMBINED_DISCOUNT_PASS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AIR_FRANCE_FAMILY")]
        AIR_FRANCE_FAMILY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT_WITH_COMPANION")]
        ADULT_WITH_COMPANION = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANION")]
        COMPANION = 11,

    }

    /// <summary>
    /// slice and Dice indicator, such as Local Availability, Sub OnD(Origin and Destination) 1 Availability and Sub OnD 2 Availability
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SliceDiceIndicator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOCAL_AVAILABILITY")]
        LOCAL_AVAILABILITY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_1")]
        SUB_OD_AVAILABILITY_1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_OD_AVAILABILITY_2")]
        SUB_OD_AVAILABILITY_2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class AllotmentDetails
    {
        /// <summary>
        /// The tour name agreed for this specific allotment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tourName")]
        public string TourName { get; set; }

        /// <summary>
        /// The tour reference agreed for this specific allotment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tourReference")]
        public string TourReference { get; set; }

    }

    /// <summary>
    /// Details of chargeable checked bags
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class ChargeableCheckdBags : BaggageAllowance
    {
        /// <summary>
        /// Id of the chargeable bag
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

    }

    /// <summary>
    /// Details of chargeable seat
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class ChargeableSeat
    {
        /// <summary>
        /// Id of the chargeable seat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// seat number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[1-9][0-9]{0,2}[A-Z]?")]
        public string Number { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Dictionaries
    {

        [System.Text.Json.Serialization.JsonPropertyName("locations")]
        public LocationEntry Locations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("aircraft")]
        public AircraftEntry Aircraft { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("currencies")]
        public CurrencyEntry Currencies { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("carriers")]
        public CarrierEntry Carriers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class LocationValue
    {
        /// <summary>
        /// City code associated to the airport
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityCode")]
        public string CityCode { get; set; }

        /// <summary>
        /// Country code of the airport
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public string CountryCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class GetFlightOffersQuery
    {
        /// <summary>
        /// The currency code, as defined in [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217), to reflect the currency in which this amount is expressed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyCode")]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Origins and Destinations must be properly ordered in time (chronological order in accordance with the timezone of each location) to describe the journey consistently. Dates and times must not be past nor more than 365 days in the future, according to provider settings.Number of Origins and Destinations must not exceed the limit defined in provider settings.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originDestinations")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<OriginDestination> OriginDestinations { get; set; } = new System.Collections.ObjectModel.Collection<OriginDestination>();

        /// <summary>
        /// travelers in the trip. 
        /// <br/>
        /// <br/> Maximum number of passengers older than 2 yo (CHILD, ADULT, YOUGHT): 9.
        /// <br/> Each adult can travel with one INFANT so maximum total number of passengers: 18
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("travelers")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<Extended_TravelerInfo> Travelers { get; set; } = new System.Collections.ObjectModel.Collection<Extended_TravelerInfo>();

        /// <summary>
        /// Allows enable one or more sources. If present in the list, these sources will be called by the system.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sources")]

        // TODO(system.text.json): Add string enum item converter
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FlightOfferSource> Sources { get; set; } = new System.Collections.ObjectModel.Collection<FlightOfferSource>();

        [System.Text.Json.Serialization.JsonPropertyName("searchCriteria")]
        public SearchCriteria SearchCriteria { get; set; }

    }

    /// <summary>
    /// type of service
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRIORITY_BOARDING")]
        PRIORITY_BOARDING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AIRPORT_CHECKIN")]
        AIRPORT_CHECKIN = 1,

    }

    /// <summary>
    /// baggageAllowance
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class BaggageAllowance
    {
        /// <summary>
        /// Total number of units
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int? Quantity { get; set; }

        /// <summary>
        /// Weight of the baggage allowance
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public int? Weight { get; set; }

        /// <summary>
        /// Code to qualify unit as pounds or kilos
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weightUnit")]
        public string WeightUnit { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Success
    {

        [System.Text.Json.Serialization.JsonPropertyName("warnings")]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public Collection_Meta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();

        [System.Text.Json.Serialization.JsonPropertyName("dictionaries")]
        public Dictionaries Dictionaries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FlightSearchResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("warnings")]
        public System.Collections.Generic.ICollection<Issue> Warnings { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public Collection_Meta_Link Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FlightOffer> Data { get; set; } = new System.Collections.ObjectModel.Collection<FlightOffer>();

        [System.Text.Json.Serialization.JsonPropertyName("dictionaries")]
        public Dictionaries Dictionaries { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Source
    {
        /// <summary>
        /// a JSON Pointer [RFC6901] to the associated entity in the request document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pointer")]
        public string Pointer { get; set; }

        /// <summary>
        /// a string indicating which URI query parameter caused the issue
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parameter")]
        public string Parameter { get; set; }

        /// <summary>
        /// a string indicating an example of the right value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("example")]
        public string Example { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OneWayCombinations
    {

        [System.Text.Json.Serialization.JsonPropertyName("originDestinationId")]
        public string OriginDestinationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("flightOfferIds")]
        public System.Collections.Generic.ICollection<string> FlightOfferIds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Links
    {

        [System.Text.Json.Serialization.JsonPropertyName("self")]
        public System.Uri Self { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri Next { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri Previous { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("last")]
        public System.Uri Last { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("first")]
        public System.Uri First { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("up")]
        public System.Uri Up { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class AdditionalServices
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AdditionalServiceType? Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class AdditionalInformation
    {
        /// <summary>
        /// If true, returns the price of the first additional bag when the airline is an "Amadeus Ancillary Services" member.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("chargeableCheckedBags")]
        public bool? ChargeableCheckedBags { get; set; }

        /// <summary>
        /// If true, returns the fare family name for each flight-offer which supports fare family
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("brandedFares")]
        public bool? BrandedFares { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Itineraries
    {
        /// <summary>
        /// duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M for a duration of 2h10m
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public string Duration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("segments")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<Segment> Segments { get; set; } = new System.Collections.ObjectModel.Collection<Segment>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class PricingOptions
    {
        /// <summary>
        /// type of fare of the flight-offer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fareType")]
        //[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        //[System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public System.Collections.Generic.ICollection<string> FareType { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with included checked bags only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedCheckedBagsOnly")]
        public bool? IncludedCheckedBagsOnly { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with refundable fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("refundableFare")]
        public bool? RefundableFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no restriction fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noRestrictionFare")]
        public bool? NoRestrictionFare { get; set; }

        /// <summary>
        /// If true, returns the flight-offers with no penalty fares only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("noPenaltyFare")]
        public bool? NoPenaltyFare { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class TravelerPricings
    {
        /// <summary>
        /// Id of the traveler
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("travelerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TravelerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fareOption")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelerPricingFareOption FareOption { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("travelerType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelerType TravelerType { get; set; }

        /// <summary>
        /// if type="HELD_INFANT", corresponds to the adult traveler's id who will share the seat
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("associatedAdultId")]
        public string AssociatedAdultId { get; set; }

        /// <summary>
        /// price detail of the traveler
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public Price Price { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fareDetailsBySegment")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(18)]
        public System.Collections.Generic.ICollection<FareDetailsBySegment> FareDetailsBySegment { get; set; } = new System.Collections.ObjectModel.Collection<FareDetailsBySegment>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PricingOptionsFareType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGOTIATED")]
        NEGOTIATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CORPORATE")]
        CORPORATE = 2,

    }

    /// <summary>
    /// Fare details of the segment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class FareDetailsBySegment
    {
        /// <summary>
        /// Id of the segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("segmentId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("cabin")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TravelClass? Cabin { get; set; }

        /// <summary>
        /// Fare basis specifying the rules of a fare. Usually, though not always, is composed of the booking class code followed by a set of letters and digits representing other characteristics of the ticket, such as refundability, minimum stay requirements, discounts or special promotional elements.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fareBasis")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[[A-Z0-9]{1,18}")]
        public string FareBasis { get; set; }

        /// <summary>
        /// The name of the Fare Family corresponding to the fares. Only for the GDS provider and if the airline has fare families filled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("brandedFare")]
        public string BrandedFare { get; set; }

        /// <summary>
        /// The code of the booking class, a.k.a. class of service or Reservations/Booking Designator (RBD)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{1}")]
        public string Class { get; set; }

        /// <summary>
        /// True if the corresponding booking class is in an allotment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isAllotment")]
        public bool? IsAllotment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allotmentDetails")]
        public AllotmentDetails AllotmentDetails { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sliceDiceIndicator")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SliceDiceIndicator? SliceDiceIndicator { get; set; }

        /// <summary>
        /// Details of the included checked bags
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includedCheckedBags")]
        public BaggageAllowance IncludedCheckedBags { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalServices")]
        public AdditionalServices AdditionalServices { get; set; }

    }
    
    public enum TravelClass
    {
        [System.Runtime.Serialization.EnumMember(Value = "ECONOMY")]
        Economy = 1,

        [System.Runtime.Serialization.EnumMember(Value = "PREMIUM_ECONOMY")]
        PremiumEconomy = 2,

        [System.Runtime.Serialization.EnumMember(Value = "BUSINESS")]
        Business = 3,

        [System.Runtime.Serialization.EnumMember(Value = "FIRST")]
        First = 4
    }
    
    public class Error
    {
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public Source Source { get; set; }
    }

    public class Errors
    {
        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public List<Error> ErrorList { get; set; }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625